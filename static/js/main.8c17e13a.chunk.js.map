{"version":3,"sources":["components/Utill.js","components/InfoBox.js","components/Map.js","components/TableBox.js","components/LineGraph.js","App.js","index.js"],"names":["casesType","cases","color","fillColor","fillOpacity","divider","deaths","recovered","sortData","data","sortedData","sort","a","b","configNum","num","numeral","format","InfoBox","title","total","props","Card","className","active","isRed","onClick","CardContent","Typography","variant","component","Map","countries","center","zoom","TileLayer","url","attribution","type","map","country","index","Circle","key","countryInfo","lat","long","radius","fill","Popup","style","backgroundImage","flag","width","height","backgroundSize","backgroundPosition","showDataOnMap","TableBox","buidData","lastPoint","typeOfData","chartData","newData","x","y","push","borderColor","LineGraph","useState","originData","setOriginData","setData","useEffect","Axios","get","res","buidedData","getData","labels","newDataSet","length","item","setChartData","datasets","label","backgroundColor","App","setCountries","tableData","setTableData","countryCode","setCountryCode","setCountryInfo","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","tempCountries","name","value","iso2","getDataCountries","onCountryChange","e","target","then","newCenter","getCountryInfo","FormControl","Select","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c17e13a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nconst casesType = {\r\n  cases: {\r\n    color: \"red\",\r\n    fillColor: \"#f03\",\r\n    fillOpacity: \"0.5\",\r\n    divider: 2.5,\r\n  },\r\n  deaths: {\r\n    color: \"red\",\r\n    fillColor: \"red\",\r\n    fillOpacity: \"0.4\",\r\n    divider: 0.08,\r\n  },\r\n  recovered: {\r\n    color: \"red\",\r\n    fillColor: \"lightgreen\",\r\n    fillOpacity: \"0.6\",\r\n    divider: 0.8,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\n// config number\r\nexport const configNum = (num) => {\r\n  return num ? `+ ${numeral(num).format(\"0.0a\")}` : `+ 0`;\r\n};\r\n\r\n// draw circles on them map with interactive tooltip\r\n\r\nexport const showDataOnMap = (data, type = \"cases\") => {\r\n  return data.map((country, index) => (\r\n    <Circle\r\n      key={index}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      radius={country[type] / casesType[type].divider}\r\n      fill={casesType[type].color}\r\n      fillColor={casesType[type].fillColor}\r\n      fillOpacity={casesType[type].fillOpacity}\r\n    >\r\n      <Popup>\r\n        <div>\r\n          <div\r\n            style={{\r\n              backgroundImage: `url(${country.countryInfo.flag})`,\r\n              width: \"80px\",\r\n              height: \"50px\",\r\n              backgroundSize: \"cover\",\r\n              backgroundPosition: \"center\",\r\n            }}\r\n          ></div>\r\n          <div>{country.country}</div>\r\n          <div>Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n          <div>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport { configNum } from \"./Utill\";\r\n\r\nfunction InfoBox({ title, cases, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${props.active && \"infoBox--selected\"} ${\r\n        props.isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        {/* title */}\r\n        <Typography\r\n          variant=\"h4\"\r\n          component=\"p\"\r\n          color=\"textSecondary\"\r\n          className=\"infoBox__title\"\r\n        >\r\n          {title}\r\n        </Typography>\r\n        {/* number cases */}\r\n        <Typography variant=\"h4\" component=\"p\" className=\"infoBox__cases\">\r\n          {configNum(cases)}\r\n        </Typography>\r\n\r\n        {/* number total  */}\r\n        <Typography\r\n          variant=\"h5\"\r\n          component=\"p\"\r\n          className=\"infoBox__total\"\r\n          color=\"textSecondary\"\r\n        >\r\n          {configNum(total)} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./map.css\";\r\nimport { showDataOnMap } from \"./Utill\";\r\n\r\nfunction Map({ countries, center, zoom, casesType }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> Designer: <a hreft=\"https://github.com/kentDevFrontEnd\">KentBui</a>'\r\n        />\r\n        {/* loop through countries and draw circle on the screen */}\r\n        {/* {countries.map((country, index) => (\r\n          <Circle\r\n            key={index}\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            radius={country.cases / 2}\r\n            fill={\"red\"}\r\n            fillColor={\"#f03\"}\r\n            fillOpacity={0.5}\r\n          ></Circle>\r\n        ))} */}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction TableBox({ countries }) {\r\n  return (\r\n    <table className=\"table\">\r\n      <tbody>\r\n        {countries.map((country, index) => (\r\n          <tr key={index}>\r\n            <td>{country.country}</td>\r\n            <td>{numeral(country.cases).format(\"0,0\")}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default TableBox;\r\n","import Axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst buidData = (data, typeOfData = \"cases\") => {\r\n  let chartData = [];\r\n  let lastPoint;\r\n  for (let key in data[typeOfData]) {\r\n    if (lastPoint) {\r\n      let newData = {\r\n        x: key,\r\n        y: data[typeOfData][key] - lastPoint,\r\n      };\r\n      chartData.push(newData);\r\n    }\r\n    lastPoint = data[typeOfData][key];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst setChartData = (data, typeOfData = \"cases\") => {\r\n  let labels = [];\r\n  let newDataSet = [];\r\n  if (data && data.length > 0) {\r\n    labels = [...data.map((item) => item.x)];\r\n    newDataSet = [...data.map((item) => item.y)];\r\n  }\r\n  return { labels, newDataSet };\r\n};\r\n\r\nconst borderColor = {\r\n  cases: \"#f03\",\r\n  deaths: \"red\",\r\n  recovered: \"lightgreen\",\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [originData, setOriginData] = useState({});\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const url =\r\n      \"https://cors-anywhere.herokuapp.com/https://disease.sh/v3/covid-19/historical/all?lastdays=10\";\r\n    const getData = async () => {\r\n      const res = await Axios.get(url);\r\n      // when you need data about death or recovered you can add another params for func buildData\r\n      setOriginData(res.data);\r\n      const buidedData = buidData(res.data);\r\n      setData(buidedData);\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  const builedData = buidData(originData, casesType);\r\n  const { labels, newDataSet } = setChartData(builedData);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <h2>Wordwide cases</h2>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            labels: labels,\r\n            datasets: [\r\n              {\r\n                label: `${casesType} of the World`,\r\n                backgroundColor: \"rgba(204,255,105,0.2\",\r\n                borderColor: `${borderColor[casesType]}`,\r\n                data: newDataSet,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport TableBox from \"./components/TableBox\";\nimport { sortData } from \"./components/Utill\";\nimport LineGraph from \"./components/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [countryCode, setCountryCode] = useState(\"wordwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 0, lng: 0 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [casesType, setCasesType] = useState(\"cases\");\n  // https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n    const getDataCountries = async () => {\n      const res = await Axios.get(\"https://disease.sh/v3/covid-19/countries\");\n\n      const tempCountries = res.data.map((item) => ({\n        name: item.country,\n        value: item.countryInfo.iso2,\n      }));\n      setCountries(tempCountries);\n      // setTableData(res.data);\n      setMapCountries(res.data);\n\n      const sortedData = sortData(res.data);\n      setTableData(sortedData);\n    };\n    getDataCountries();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const value = e.target.value;\n    setCountryCode(value);\n  };\n\n  useEffect(() => {\n    const getCountryInfo = async () => {\n      const url =\n        countryCode === \"wordwide\"\n          ? `https://disease.sh/v3/covid-19/all`\n          : `https://disease.sh/v3/covid-19/countries/${countryCode}?strict=true`;\n\n      await Axios.get(url)\n        .then((res) => res.data)\n        .then((data) => {\n          setCountryInfo(data);\n          if (data.countryInfo) {\n            const newCenter = {\n              lat: data.countryInfo.lat,\n              lng: data.countryInfo.long,\n            };\n            setMapCenter(newCenter);\n            setMapZoom(5);\n          }\n        });\n    };\n    getCountryInfo();\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[country_code]\n  }, [countryCode]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* header */}\n        <header className=\"app__header\">\n          <h1>Covid 19 tracker</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={countryCode}\n              onChange={onCountryChange}\n            >\n              {/* loop through all the countries and show the dropdown options*/}\n              <MenuItem value=\"wordwide\">Wordwide</MenuItem>\n              {countries.map((country, index) => {\n                return (\n                  <MenuItem key={index} value={country.value}>\n                    {country.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </header>\n        {/* title and select input country */}\n\n        <div className=\"app__stats\">\n          {/* infobox title = \"coronavirus cases\" */}\n          <InfoBox\n            isRed={true}\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            isRed={true}\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            isRed={false}\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n        {/* infobox */}\n        {/* infobox */}\n        {/* map */}\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <TableBox countries={tableData} />\n          {/* table */}\n          {/* graph */}\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}